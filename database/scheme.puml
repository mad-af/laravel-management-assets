@startuml
!define table(x) class x << (T,#FFAAAA) >>
!define pk(x) <u>x</u>
!define fk(x) <i>x</i>

title Laravel Asset Management System - Entity Relationship Diagram (Multi-tenant with Companies) + Asset Transfer (MVP)

' ==========================
' Company / Tenant Table
' ==========================
table(companies) {
  pk(id) : UUID
  name : VARCHAR [UNIQUE]
  code : VARCHAR [UNIQUE]
  fk(location_id) : UUID [NULL]
  tax_id : VARCHAR [NULL]
  address : TEXT [NULL]
  phone : VARCHAR [NULL]
  email : VARCHAR [NULL]
  website : VARCHAR [NULL]
  is_active : BOOLEAN [DEFAULT: true]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

' ==========================
' Main Business Tables
' ==========================
table(users) {
  pk(id) : UUID
  fk(company_id) : UUID
  name : VARCHAR
  email : VARCHAR [UNIQUE]
  role : ENUM(admin, staff, auditor) [DEFAULT: staff]
  email_verified_at : TIMESTAMP [NULL]
  password : VARCHAR
  remember_token : VARCHAR [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(categories) {
  pk(id) : UUID
  fk(company_id) : UUID
  name : VARCHAR [UNIQUE]
  is_active : BOOLEAN [DEFAULT: true]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(locations) {
  pk(id) : UUID
  name : VARCHAR [UNIQUE]
  is_active : BOOLEAN [DEFAULT: true]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(assets) {
  pk(id) : UUID
  fk(company_id) : UUID
  code : VARCHAR [UNIQUE]
  tag_code : VARCHAR [UNIQUE, NULL]
  name : VARCHAR
  fk(category_id) : UUID
  fk(location_id) : UUID
  status : ENUM(active, damaged, lost, maintenance, checked_out) [DEFAULT: active]
  condition : ENUM(excellent, good, fair, poor) [DEFAULT: good]
  value : DECIMAL(15,2)
  purchase_date : DATE [NULL]
  description : TEXT [NULL]
  last_seen_at : TIMESTAMP [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(asset_logs) {
  pk(id) : UUID
  fk(asset_id) : UUID
  fk(user_id) : UUID
  action : VARCHAR
  changed_fields : JSON [NULL]
  notes : TEXT [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(asset_loans) {
  pk(id) : UUID
  fk(asset_id) : UUID
  borrower_name : VARCHAR
  checkout_at : TIMESTAMP
  due_at : TIMESTAMP
  checkin_at : TIMESTAMP [NULL]
  condition_out : VARCHAR
  condition_in : VARCHAR [NULL]
  notes : TEXT [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

table(asset_maintenances) {
  pk(id) : UUID
  fk(asset_id) : UUID
  title : VARCHAR
  type : ENUM(preventive, corrective)
  status : ENUM(open, scheduled, in_progress, completed, cancelled) [DEFAULT: open]
  priority : ENUM(low, medium, high, critical) [DEFAULT: medium]
  scheduled_at : TIMESTAMP [NULL]
  started_at : TIMESTAMP [NULL]
  completed_at : TIMESTAMP [NULL]
  cost : DECIMAL(15,2) [DEFAULT: 0.00]
  technician_name : VARCHAR [NULL]
  vendor_name : VARCHAR [NULL]
  notes : TEXT [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

' ==========================
' NEW: Asset Transfer (MVP)
' ==========================
' Header dokumen mutasi aset (batch, multi-aset)
table(asset_transfers) {
  pk(id) : UUID
  fk(company_id) : UUID
  transfer_no : VARCHAR [UNIQUE]
  reason : VARCHAR [NULL]
  status : ENUM(draft, submitted, approved, executed, void) [DEFAULT: draft]
  fk(requested_by) : UUID
  fk(approved_by) : UUID [NULL]
  scheduled_at : TIMESTAMP [NULL]
  executed_at : TIMESTAMP [NULL]
  notes : TEXT [NULL]
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

' Item per aset dalam satu transfer (asal & tujuan lokasi)
table(asset_transfer_items) {
  pk(id) : UUID
  fk(asset_transfer_id) : UUID
  fk(asset_id) : UUID
  fk(from_location_id) : UUID
  fk(to_location_id) : UUID
  created_at : TIMESTAMP
  updated_at : TIMESTAMP
}

' Riwayat perubahan lokasi aset (audit trail)
table(asset_location_history) {
  pk(id) : UUID
  fk(asset_id) : UUID
  fk(from_location_id) : UUID [NULL]
  fk(to_location_id) : UUID
  changed_at : TIMESTAMP
  fk(changed_by) : UUID
  fk(transfer_id) : UUID [NULL]
  remark : VARCHAR [NULL]
}

' ==========================
' Laravel System Tables
' ==========================

table(password_reset_tokens) {
  pk(email) : VARCHAR
  token : VARCHAR
  created_at : TIMESTAMP [NULL]
}

 table(sessions) {
  pk(id) : VARCHAR
  fk(user_id) : UUID [NULL]
  ip_address : VARCHAR(45) [NULL]
  user_agent : TEXT [NULL]
  payload : LONGTEXT
  last_activity : INTEGER
}

 table(cache) {
  pk(key) : VARCHAR
  value : MEDIUMTEXT
  expiration : INTEGER
}

 table(cache_locks) {
  pk(key) : VARCHAR
  owner : VARCHAR
  expiration : INTEGER
}

 table(jobs) {
  pk(id) : BIGINT
  queue : VARCHAR
  payload : LONGTEXT
  attempts : TINYINT
  reserved_at : INTEGER [NULL]
  available_at : INTEGER
  created_at : INTEGER
}

 table(job_batches) {
  pk(id) : VARCHAR
  name : VARCHAR
  total_jobs : INTEGER
  pending_jobs : INTEGER
  failed_jobs : INTEGER
  failed_job_ids : LONGTEXT
  options : MEDIUMTEXT [NULL]
  cancelled_at : INTEGER [NULL]
  created_at : INTEGER
  finished_at : INTEGER [NULL]
}

 table(failed_jobs) {
  pk(id) : BIGINT
  uuid : VARCHAR [UNIQUE]
  connection : TEXT
  queue : TEXT
  payload : LONGTEXT
  exception : LONGTEXT
  failed_at : TIMESTAMP
}

' ==========================
' Relationships
' ==========================
companies ||--o{ users : "has many"
companies ||--o{ categories : "has many"
locations ||--o{ companies : "has many"   ' HQ / lokasi induk perusahaan (opsional)
companies ||--o{ assets : "has many"
companies ||--o{ asset_transfers : "has many"

categories ||--o{ assets : "has many"
locations ||--o{ assets : "has many"
assets ||--o{ asset_logs : "has many"
assets ||--o{ asset_loans : "has many"
assets ||--o{ asset_maintenances : "has many"
users ||--o{ asset_logs : "creates"
users ||--o{ sessions : "has many"
users ||--o{ password_reset_tokens : "has many"

' NEW: Asset Transfer relations
asset_transfers ||--o{ asset_transfer_items : "has many"
assets ||--o{ asset_location_history : "has many"
users ||--o{ asset_transfers : "requests/approves"

' from/to location references for items & history
locations ||--o{ asset_transfer_items : "as from_location"
locations ||--o{ asset_transfer_items : "as to_location"
locations ||--o{ asset_location_history : "as from_location"
locations ||--o{ asset_location_history : "as to_location"

' linking history to transfer (optional)
asset_transfers ||--o{ asset_location_history : "writes"

' ==========================
' Notes
' ==========================
note right of companies
  Top-level tenant/company entity
  Use to scope data for multi-tenant installs
  Consider composite unique constraints, e.g. (company_id, name)
  on categories, locations, and optionally assets.code
end note

note right of assets
  Core entity for asset management
  Tracks physical assets with
  categories, locations, and status
  Scoped by company_id for tenancy
end note

note right of asset_transfers
  Header dokumen mutasi aset (batch)
  Minimal status flow untuk MVP: draft -> executed
  (opsional submitted/approved bila lintas unit)
  Eksekusi akan update assets.location_id & menulis asset_location_history
end note

note right of asset_transfer_items
  Setiap baris merepresentasikan satu aset yang dipindahkan
  Validasi penting: from_location_id harus sama dengan
  lokasi aset saat ini ketika dieksekusi
end note

note right of asset_location_history
  Jejak audit perubahan lokasi aset
  changed_by mengacu ke user yang mengeksekusi
  transfer_id opsional untuk mengikat ke dokumen transfer
end note

@enduml
